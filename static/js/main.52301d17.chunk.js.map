{"version":3,"sources":["Components/Countries.js","App.js","serviceWorker.js","index.js"],"names":["initialState","loading","error","posts","Countries","useState","state","setState","useEffect","axios","get","then","res","data","catch","countries","Array","from","className","type","placeholder","map","con","index","key","src","flag","alt","name","population","region","capital","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"kSAIMA,G,MAAe,CACnBC,SAAS,EACTC,MAAO,GACPC,MAAO,KAyDMC,MAtDf,WAAsB,IAAD,EAEOC,mBAASL,GAFhB,mBAEZM,EAFY,KAELC,EAFK,KAInBC,qBAAU,WACRC,IACCC,IAAI,wCACJC,MAAK,SAAAC,GACJL,EAAS,CAACN,SAAS,EAAOC,MAAO,GAAIC,MAAOS,EAAIC,UAEjDC,OAAM,SAAAZ,GACLK,EAAS,CAACN,SAAS,EAAOC,MAAO,uBAAwBC,MAAO,UAGjE,CAACG,IAEH,IAAMS,EAAYC,MAAMC,KAAKX,EAAMH,OAEpC,OACE,6BACE,yBAAKe,UAAU,UACX,6BACI,2BAAOC,KAAK,OAAOC,YAAa,6BAEpC,6BACI,gCACE,oDACA,0CACA,2CACA,0CACA,8CAIR,yBAAKF,UAAU,qBACZZ,EAAML,QAAS,8CAChBc,EAAUM,KAAI,SAACC,EAAKC,GAAN,OAAgB,yBAAKC,IAAKD,EAAOL,UAAU,cACnD,yBAAKO,IAAKH,EAAII,KAAMC,IAAI,eAAeT,UAAU,aACjD,yBAAKA,UAAU,SACb,uBAAGA,UAAU,kBAAkBI,EAAIM,MACnC,2BAAG,8CAAH,IAA8BN,EAAIO,YAClC,2BAAG,0CAAsBP,EAAIQ,QAC7B,2BAAG,0CAAH,IAA0BR,EAAIS,cAIpCzB,EAAMJ,MAAQI,EAAMJ,MAAQ,Q,MC3BzB8B,MAtBf,WACE,OACE,yBAAMd,UAAU,aAEd,gCACE,yBAAKA,UAAU,gBACb,6BACE,oDAEF,yBAAKA,UAAU,SACb,kBAAC,IAAD,CAAYA,UAAU,eACtB,kBAAC,IAAD,CAAUA,UAAU,cACpB,8CAKN,kBAAC,EAAD,QCZce,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlC,MAAK,SAAAmC,GACJA,EAAaC,gBAEdjC,OAAM,SAAAZ,GACL8C,QAAQ9C,MAAMA,EAAM+C,c","file":"static/js/main.52301d17.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport axios from 'axios'\r\nimport '../Styles/Countries.style.scss'\r\n\r\nconst initialState = {\r\n  loading: true,\r\n  error: '',\r\n  posts: {}\r\n}\r\n\r\nfunction Countries() {\r\n\r\n  const [state, setState] = useState(initialState)\r\n\r\n  useEffect(() => {\r\n    axios\r\n    .get('https://restcountries.eu/rest/v2/all')\r\n    .then(res => {\r\n      setState({loading: false, error: '', posts: res.data})\r\n    })\r\n    .catch(error =>{\r\n      setState({loading: false, error: \"Something went wrong\", posts: {}})\r\n    } )\r\n\r\n  }, [state])\r\n\r\n   const countries = Array.from(state.posts)\r\n\r\n  return (\r\n    <div> \r\n      <div className=\"search\">\r\n          <div>\r\n              <input type=\"text\" placeholder= \"Search for a country...\"/>\r\n          </div>\r\n          <div>\r\n              <select>\r\n                <option>Filter by Region</option>\r\n                <option>Africa</option>\r\n                <option>America</option>\r\n                <option>Europe</option>\r\n                <option>Oceania</option>\r\n              </select>\r\n          </div>\r\n        </div>\r\n        <div className=\"countries-wrapper\">\r\n          {state.loading? <h1>Please Wait...</h1> : \r\n          countries.map((con, index) => <div key={index} className=\"list-items\">\r\n                <img src={con.flag} alt=\"country-flag\" className=\"img-flag\"/>\r\n                <div className=\"items\">\r\n                  <p className=\"countries-name\">{con.name}</p>\r\n                  <p><span>Populations:</span> {con.population}</p>\r\n                  <p><span>Region: </span>{con.region}</p>\r\n                  <p><span>Capital:</span> {con.capital}</p>\r\n                </div>\r\n            </div>)\r\n          }\r\n          { state.error ? state.error : null}\r\n        </div>\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\n\r\nexport default Countries\r\n","import React from 'react';\nimport { RiMoonLine } from \"react-icons/ri\"\n//import {FaMoon} from 'react-icons/fa'\nimport { IoMdMoon } from 'react-icons/io'\nimport Countries from './Components/Countries'\nimport './App.scss';\n\nfunction App() {\n  return (\n    <div  className=\"App-light\">\n\n      <header>\n        <div className=\"inner-header\">\n          <div>\n            <h2>Where in the World?</h2>\n          </div>\n          <div className=\"icons\">\n            <RiMoonLine className=\"dark-light\"/>\n            <IoMdMoon className=\"dark-moon\"/>\n            <span>Dark mode</span>\n          </div> \n        </div>\n      </header>\n      \n      <Countries />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n//import './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App  />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}