{"version":3,"sources":["Components/Search.js","hook/useFetch.js","Components/Countries.js","Components/CountryDetail.js","App.js","serviceWorker.js","index.js"],"names":["Search","countries","regions","useState","toggleOptions","setToggleOption","inputRef","useRef","selectOptionRef","selectedRef","useEffect","current","addEventListener","inputValue","value","trim","toLowerCase","options","document","querySelectorAll","Array","from","forEach","el","innerHTML","classList","remove","add","selected","className","ref","type","placeholder","onClick","useFetch","loading","error","postDetails","countryDetails","setCountryDetails","getCountryDetails","a","axios","get","response","data","Countries","CountriesName","filter","textContent","includes","elm","parentElement","map","con","index","key","src","flag","alt","to","name","population","region","capital","CountryDetail","history","useHistory","useParams","findIndex","console","log","goBack","height","width","nativeName","subregion","topLevelDomain","top","ind","currencies","cur","languages","lang","borders","bor","App","toggle","setToggle","exact","path","component","CountryDetails","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.04c184ef.chunk.js","sourcesContent":["import React, {useState, useRef, useEffect} from 'react'\r\n\r\nfunction Search({countries, regions}) {\r\n\r\n    const [toggleOptions, setToggleOption] = useState(false)\r\n    const inputRef = useRef(null)\r\n    const selectOptionRef = useRef(null)\r\n    const selectedRef = useRef(null)\r\n\r\n    const openCloseOptions = () =>{\r\n        setToggleOption(!toggleOptions)\r\n    }\r\n\r\n    // Input Search\r\n    useEffect(() =>{\r\n        inputRef.current.addEventListener('keyup', () =>{\r\n                const inputValue = inputRef.current.value.trim().toLowerCase()\r\n                countries(inputValue)\r\n        })\r\n    }, [countries])\r\n\r\n    // Filtered based on Region\r\n    useEffect(()=>{\r\n        let options = document.querySelectorAll('.option')\r\n\r\n        Array.from(options)\r\n        .forEach(el =>{\r\n            el.addEventListener('click', ()=>{\r\n                selectedRef.current.innerHTML = el.innerHTML\r\n                selectOptionRef.current.classList.remove('active')\r\n                selectOptionRef.current.classList.add('options-container')\r\n\r\n                const selected = selectedRef.current.innerHTML\r\n                regions(selected)\r\n                \r\n            })\r\n        })\r\n        \r\n    }, [regions])\r\n\r\n  return (\r\n    <div>\r\n            <div className=\"search\">\r\n                <div className=\"input-search\">\r\n                    <input ref={inputRef} type=\"text\" placeholder=\"Search for a country...\"/>\r\n                </div>\r\n                <div className=\"select-box\">\r\n\r\n                    <div ref={selectOptionRef} className={toggleOptions ? \"active\" : \"options-container\"}>\r\n\r\n                        <div className=\"option\">Africa</div>  \r\n                        <div  className=\"option\">America</div>\r\n                        <div  className=\"option\">Asia</div>\r\n                        <div className=\"option\">Europe</div>\r\n                        <div className=\"option\">Oceania</div>\r\n                    \r\n                    </div>  \r\n\r\n                <div ref={selectedRef} onClick={openCloseOptions} className=\"selected\">Filter by Region</div>  \r\n                </div>\r\n            </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Search\r\n\r\n","import { useEffect,useState } from 'react'\r\nimport axios from 'axios';\r\n\r\nfunction useFetch() {\r\n\r\n    const initialState = {\r\n            loading: true,\r\n            error: '',\r\n            postDetails: {}\r\n      }\r\n      \r\n    const [countryDetails, setCountryDetails] = useState(initialState);\r\n    const getCountryDetails = async () =>{\r\n\r\n        try{\r\n  \r\n            const response = await axios.get('https://restcountries.eu/rest/v2/all');\r\n            const data =  response.data\r\n            setCountryDetails({loading: false, error: '', postDetails: data})\r\n        \r\n        }catch(err){\r\n            setCountryDetails({loading: false, error: \"Something went wrong\", postDetails: {}})\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n\r\n        getCountryDetails();\r\n        \r\n      }, [])\r\n      return [{\r\n          countryDetails: countryDetails.postDetails,\r\n          loading: countryDetails.loading,\r\n          error: countryDetails.error \r\n      }]\r\n}\r\n\r\nexport default useFetch\r\n\r\n","import React  from 'react'\r\nimport Search from './Search'\r\nimport { Link } from 'react-router-dom'\r\nimport useFetch from '../hook/useFetch'\r\n\r\n\r\nfunction Countries() {\r\n  const [countryDetails ] = useFetch()\r\n  \r\n//Input Search\r\n  const filteredCountry = (inputValue) =>{\r\n    let CountriesName = document.querySelectorAll('.countries-name')\r\n\r\n    Array.from(CountriesName)\r\n    .filter(el => !el.textContent.toLowerCase().includes(inputValue))\r\n    .forEach(elm => elm.parentElement.classList.add('filterd'))\r\n\r\n    Array.from(CountriesName)\r\n    .filter(el => el.textContent.toLowerCase().includes(inputValue))\r\n    .forEach(elm => elm.parentElement.classList.remove('filterd'))\r\n  }\r\n\r\n// Filtered based on region\r\n\r\n  const filteredRegion = (selected) =>{\r\n    let regions = document.querySelectorAll('.region')\r\n\r\n    Array.from(regions)\r\n    .filter(el => !el.innerHTML.includes(selected))\r\n    .forEach(elm => elm.parentElement.classList.add('filterd'))\r\n\r\n    Array.from(regions)\r\n    .filter(el => el.innerHTML.includes(selected))\r\n    .forEach(elm => elm.parentElement.classList.remove('filterd'))\r\n  }\r\n\r\n   const countries = Array.from(countryDetails.countryDetails)\r\n\r\n  return (\r\n    <div> \r\n      <div className=\"CountriesContainer\">\r\n       \r\n         <Search countries={filteredCountry} regions={filteredRegion}/>\r\n\r\n          <ul className=\"countries-wrapper\">\r\n            {countryDetails.loading? <h1>Please Wait...</h1> : \r\n            countries.map((con, index) => <li key={index} className=\"list-items\">\r\n                \r\n                  <img src={con.flag} alt=\"country-flag\" className=\"img-flag\"/>\r\n                  <p className=\"countries-name\">\r\n                    <Link to={`/rest-countries-api/${con.name}`} className=\"activeStyle\">{con.name}</Link>\r\n                  </p>      \r\n                  <p><span>Populations:</span> {con.population}</p>\r\n                  <p className=\"region\"><span>Region: </span>{con.region}</p>\r\n                  <p><span>Capital:</span> {con.capital}</p> \r\n                    \r\n              </li>)\r\n            }\r\n            { countryDetails.error ? countryDetails.error : null}\r\n          </ul>\r\n        </div>\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\n\r\nexport default Countries\r\n","import React from 'react'\r\nimport { useParams, useHistory } from 'react-router-dom'\r\nimport { FaArrowLeft } from \"react-icons/fa\";\r\nimport { Link } from 'react-router-dom'\r\nimport  useFetch  from '../hook/useFetch'\r\n\r\n\r\nfunction CountryDetail() {\r\n\r\n  const [countryDetails ] = useFetch()\r\n  const  history  = useHistory();\r\n  const { name } = useParams();\r\n  \r\n  \r\n  //goBack function\r\n  const goBackHandler = () =>{\r\n    history.goBack()\r\n  }\r\n\r\n  //Push function\r\n//   const pushHandler = () =>{\r\n// \t  if()\r\n//     history.push(`/rest-countries-api/${name}`)\r\n//   }\r\n\r\n\r\n  const country = Array.from(countryDetails.countryDetails)\r\n  const findIndex = country.filter(el => el.name === name)\r\n  console.log(findIndex)\r\n  return (\r\n  \r\n    <div className=\"countries-det-wrapper\">\r\n      \t<div className=\"back-wrapper\">\r\n        \t<div className=\"back\" onClick={goBackHandler}><FaArrowLeft /> Back</div>\r\n      \t</div>\r\n    \r\n      \t<div >\r\n           {\r\n            countryDetails.loading? <h1>Please Wait...</h1> :\r\n            findIndex.map((el, index) => <div key={index} className=\"detail-wrapper\">\r\n            <div className=\"con-flag\">\r\n                <img src={el.flag} alt=\"country flag\" height=\"450\" width=\"550\" className=\"flag-img\"/>\r\n            </div>   \r\n            <div className=\"details\">\r\n          \t\t<div className=\"flex\">\r\n            \t\t<div className=\"bottom\">\r\n              \t\t\t<p className=\"delName\">{el.name}</p>\r\n              \t\t\t<p><span>Native Name: </span>{el.nativeName}</p>\r\n              \t\t\t<p><span>Population: </span>{el.population}</p>\r\n              \t\t\t<p><span>Region: </span>{el.region}</p>\r\n              \t\t\t<p><span>Sub Region: </span>{el.subregion}</p>\r\n              \t\t\t<p><span>Capital: </span>{el.capital}</p>\r\n            \t\t</div>\r\n           \t\t\t<div className=\"top\">\r\n              \t\t\t<div>\r\n                \t\t\t<span>Top Level Domain: </span>{el.topLevelDomain.map((top, ind)=> <div key={ind} className=\"topL\">{top}</div>)}\r\n              \t\t\t</div>\r\n\t\t\t\t\t\t<div>\t   \r\n            \t    \t\t<span>Currencies: </span>{el.currencies.map((cur, ind)=> <div key={ind} className=\"cur\">{cur.name}</div>)}\r\n            \t\t\t</div> \r\n                \t\t<div>\t   \r\n                \t\t\t<span>Languages: </span>{el.languages.map((lang, ind)=> <div key={ind} className=\"lang\">{lang.name}</div>)}\r\n              \t\t\t</div> \r\n            \t\t</div>\r\n          \t\t</div>\r\n          \t\t<div className=\"borders-wrapper\">\t   \r\n            \t\t<span className=\"con-bor\">Borders Countries: </span>{el.borders.map((bor, ind)=> <div key={ind} className=\"borders\"><Link to={`/rest-countries-api/${bor.name}`}>{bor}</Link></div>)}\r\n          \t\t</div> \r\n        \t</div> \r\n\t\t\t \r\n            </div>)\r\n           }\r\n            { countryDetails.error ? countryDetails.error : null}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CountryDetail\r\n","import React, { useState } from 'react';\nimport { RiMoonLine } from \"react-icons/ri\"\nimport { IoMdMoon } from 'react-icons/io'\nimport Countries from './Components/Countries'\nimport './App.scss';\nimport { Route, Switch, Link } from 'react-router-dom'\nimport CountryDetails from './Components/CountryDetail'\n\nfunction App() {\n  const [toggle, setToggle] = useState(true)\n\n  const toggleHandler = ()=>{\n    setToggle(!toggle)\n  }\n\n  return (\n    // <div  className=\"App-light\">\n    <div className={ toggle ? \"App-light\" : \"App-Dark\"}> \n\n      <header >\n        <div className=\"inner-header\">\n          <div>\n            <h1>Where in the World?</h1>\n          </div>\n          <div className=\"icons\" onClick={toggleHandler}>\n            <RiMoonLine className=\"light-moon\"/>\n            <IoMdMoon className=\"dark-moon\"/>\n            <span>Dark mode</span>\n          </div> \n        </div>\n      </header>\n      \n      <div><Link to=\"/rest-countries-api\"></Link></div>\n\n      <Switch>\n        <Route exact path=\"/rest-countries-api\" component={Countries }/>\n        <Route exact path=\"/rest-countries-api/:name\" component={CountryDetails} />\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n//import './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App  />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}